generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  firstName String
  lastName  String
  password  String
  chats     Chat[]
  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  apiLimit     UserApiLimit?
  subscription UserSubscription?
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum ChatType {
  CONVERSATION
  MUSIC
  VIDEO
  IMAGE
  CODE
}

model Summary {
  id        String   @id @default(cuid())
  content   String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String    @id @default(cuid())
  name      String
  type      ChatType  @default(CONVERSATION)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  summaries Summary[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id          String   @id @default(cuid())
  content     String?
  role        String
  name        String?
  chatId      String
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrls   String[]
  musicUrl    String?
  videoUrl    String?
  codeSnippet String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
